<%
	trigger_start_element = false

	failures = []
	if result[:check_deploy_status_response][:result][:run_test_result][:failures]
		if result[:check_deploy_status_response][:result][:run_test_result][:failures].kind_of? Array
			failures = result[:check_deploy_status_response][:result][:run_test_result][:failures]
		else
			failures.push(result[:check_deploy_status_response][:result][:run_test_result][:failures])	
		end
	end
	
	successes = []
	if result[:check_deploy_status_response][:result][:run_test_result][:successes]
		if result[:check_deploy_status_response][:result][:run_test_result][:successes].kind_of? Array
			successes = result[:check_deploy_status_response][:result][:run_test_result][:successes]
		else
			successes.push(result[:check_deploy_status_response][:result][:run_test_result][:successes])	
		end
	end
	
	code_coverage_result = []
	if result[:check_deploy_status_response][:result][:run_test_result][:code_coverage].kind_of? Array
		code_coverage_result = result[:check_deploy_status_response][:result][:run_test_result][:code_coverage]
	else
		code_coverage_result.push(result[:check_deploy_status_response][:result][:run_test_result][:code_coverage])	
	end	
	
	results_normal = {}
	#{"foo"=>[{:name = "foobar"}{:name = "something else"}], "bar"=>[]}
	
	successes.each do |success|
	 	if ! results_normal.has_key? success[:name] #key isn't there yet, put it in        
      arr = Array.new
			results_normal[success[:name]] = arr.push(success)
    else #key is there, let's add metadata to it
    	arr = results_normal[success[:name]] #get the existing array
      arr.push(success) #add the new piece of metadata
      results_normal[success[:name]] = arr #replace the key
    end
	end
	
	failures.each do |failure|
	 	if ! results_normal.has_key? failure[:name] #key isn't there yet, put it in        
      arr = Array.new
			results_normal[failure[:name]] = arr.push(failure) #file name with no extension
    else #key is there, let's add metadata to it
    	arr = results_normal[failure[:name]] #get the existing array
      arr.push(failure) #add the new piece of metadata
      results_normal[failure[:name]] = arr #replace the key
    end
	end
%>

<% results_normal.each do |cls, tests| %>
	
	<%
		failing_tests = tests.count {|test| test[:stack_trace] } || 0
		passing_tests = tests.count {|test| !test[:stack_trace] } || 0
		total_tests = passing_tests + failing_tests
	%>
	
	<div class="alert-message block-message-custom" style="margin-bottom:0px;padding: 5px;-webkit-border-radius: 4px 4px 0px 0px;">
			<p style="float:left;"><strong><%= cls %>.cls</strong></p>
			<p style="float:right;"><strong><%= passing_tests %>/<%= total_tests %> tests passed</strong></p>
		<div style="clear:both;"/>	
	</div>
	<table class="bordered-table test_result" style="-webkit-border-radius: 0px 0px 4px 4px;">
		<thead>
			<tr>
				<th>Test Method</th>
				<th>Result</th>
				<th>Message</th>
			</tr>
		</thead>
		<tbody>
			<% tests.each do |test| %>
				<tr>
					<td style="width:210px;"><%= test[:method_name] %></td>
					<td style="width:45px;">
						<% if ! test[:stack_trace] %>
							<span class="label success">Passed</span>
						<% else %>
							<span class="label important">Failed</span>
						<% end %>
					</td>
					<td><%= test[:message] ? test[:message] : "" %></td>
				</tr>
			<% end %>
		</tbody>
	</table>
<% end %>


<% code_coverage_result.each_with_index do |result, i| %>
<% next if result[:num_locations].to_i == 0 %>
<% coverage = 100 * ((result[:num_locations].to_f - result[:num_locations_not_covered].to_f) / result[:num_locations].to_f) %>
<% 
	locations_not_covered_result = []
	if ! result[:locations_not_covered].nil?
		if result[:locations_not_covered].kind_of? Array
			locations_not_covered_result = result[:locations_not_covered]
		else
			locations_not_covered_result.push(result[:locations_not_covered])	
		end
	end
	
	coverage_class = "" 
	case coverage.to_i
	when 0..40
	  coverage_class = "low"
	when 41..74
	  coverage_class = "medium"
	when 75..100
	  coverage_class = ""
	else
	  coverage_class = ""
	end
	
	# passing_tests = successes.count {|test| test[:name] == result[:name]} || 0
	# failing_tests = failures.count {|test| test[:name] == result[:name]} || 0
	# total_tests = passing_tests + failing_tests
	display = coverage.to_i == 0 ? "none" : "block"
%>

<% if result[:type] == "Trigger" and !trigger_start_element %>
	<a class="btn success" style="margin-bottom:10px;padding: 3px 5px;" href="javascript:void(0);" onclick="toggleTriggers(this);">Show Trigger Coverage &raquo;</a>
	<div id="trigger_wrapper" style="display:none;">
	<% trigger_start_element = true %>
<% end %> 

<% extension = result[:type] == "Class" ? "cls" : "trigger"  %>
<% directory = result[:type] == "Class" ? "classes" : "triggers"  %>


<div class="alert-message block-message-custom " style="padding: 0px 5px 5px 5px;">
  <div style="margin-bottom:10px;">
		<p style="float:left;"><strong><%= result[:name] %>.<%= extension %></strong></p>
		<p style="float:right;"><strong></strong></p>
	</div>
	<div style="clear:both;"/>
	<p style="margin-bottom:10px;">
		<div id="progress_bar" class="ui-progress-bar ui-container" style="-webkit-border-radius: 8px;height: 22px;">
      <div class="ui-progress <%= coverage_class %>" style="-webkit-border-radius:8px;height:20px;width: <%= coverage %>%; display: <%= display %>; ">
        <span style="font-size: 1.1em;line-height: 21px;" class="ui-label <%= coverage_class %>"><%= coverage.to_i %>%</span>
      </div>
    </div>
	</p>
  <div class="alert-actions">
    <a href="#" class="btn primary" data-toggle="toggle" 
			onclick="toggleSourceButton(this, <%= i + 1 %>)" style="padding: 3px 5px;font-size: .9em;">View Coverage</a>
  </div>
</div>
<table class='code' id="code_result_<%= i + 1 %>">
	<tbody>
	<% File.open("#{ENV['TM_PROJECT_DIRECTORY']}/src/#{directory}/#{result[:name]}.#{extension}").each_with_index do |line, index| %>
		<% 
			td_class = locations_not_covered_result.detect {|loc| loc[:line].to_i == index + 1 } ? "not_covered" : "covered" 
		%>
		<tr>
	    <td class="line_numbers"><%= index + 1 %></td>
	    <td class="code <%= td_class %>"><%= htmlize(line) %></td>
		</tr>
	<% end %>
	</body>
</table>

<% end %>
</div>
<script>
	$("#a_result").click();
	resize();
	
	function toggleTriggers(el) {
		if ($(el).html().indexOf("Show Trigger Coverage") != -1) {
			$(el).html("Hide Trigger Coverage").removeClass("success");
		} else {
			$(el).html("Show Trigger Coverage &raquo;").addClass("success");
		}
		$('#trigger_wrapper').toggle();
		resize();

		if ($(el).html().indexOf("Hide Trigger Coverage") != -1) {
			$("html, body").animate({
		      scrollTop: $(el).offset().top - 50
		  }, 400);
		}
	}
</script>
<style>
	table.test_result {
		border-top:none;
	}
	table.test_result th, table.test_result td {
		padding:5px;
		line-height:1;
	}
	
</style>